{"version":3,"sources":["Projects.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["PROJECTS","id","title","description","link","Project","_this$props$project","this","props","project","react_default","a","createElement","style","display","width","margin","href","Component","Projects","state","map","PROJECT","Projects_Project","key","App","displayBio","toggleBio","_this","setState","src","logo","alt","className","onClick","src_Projects","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAGMA,SAAW,CACf,CACEC,GAAI,EACJC,MAAO,4BACPC,YACE,oEACFC,KAAM,uCAER,CACEH,GAAI,EACJC,MAAO,WACPC,YAAa,yDACbC,KAAM,wCAER,CACEH,GAAI,EACJC,MAAO,qBACPC,YACE,iEACFC,KAAM,0CAGJC,mLACK,IAAAC,EAC8BC,KAAKC,MAAMC,QAAxCP,EADDI,EACCJ,MAAOC,EADRG,EACQH,YAAaC,EADrBE,EACqBF,KAC5B,OACEM,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,eAAgBC,MAAO,IAAKC,OAAQ,KACzDN,EAAAC,EAAAC,cAAA,UAAKV,GAELQ,EAAAC,EAAAC,cAAA,SAAIT,GACJO,EAAAC,EAAAC,cAAA,KAAGK,KAAMb,GAAOA,WARFc,aA8BPC,6MAfbC,MAAQ,2EAEN,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,WACGZ,EAASqB,IAAI,SAAAC,GACZ,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CAASC,IAAKF,EAAQrB,GAAIQ,QAASa,eAR/BJ,aCURO,6MA3CbL,MAAQ,CACNM,YAAY,KAIdC,UAAY,WACVC,EAAKC,SAAS,CAAEH,YAAaE,EAAKR,MAAMM,sFAEjC,IAECA,EAAenB,KAAKa,MAApBM,WAER,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKkB,IAAKC,IAAMC,IAAI,UAAUC,UAAU,YACxCvB,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oCAEAF,EAAAC,EAAAC,cAAA,4EACCc,EACChB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,uFAIAF,EAAAC,EAAAC,cAAA,UAAQsB,QAAS3B,KAAKoB,WAAtB,cAGFjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQsB,QAAS3B,KAAKoB,WAAtB,cAGJjB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAAA,mBArCUM,aCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a65058df.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import PROJECTS from \"../data/projects\";\n\nconst PROJECTS = [\n  {\n    id: 1,\n    title: \"Example React Application\",\n    description:\n      \"A React App that I built, involving JS and core web dev concepts!\",\n    link: \"https://github.com/sirkells/example\"\n  },\n  {\n    id: 2,\n    title: \"REST API\",\n    description: \"A REST API that I built for the job finder application\",\n    link: \"https://github.com/sirkells/Projecty\"\n  },\n  {\n    id: 3,\n    title: \"A Blog Application\",\n    description:\n      \"A simple blog application with authentication built with flask\",\n    link: \"https://github.com/sirkells/kongblog\"\n  }\n];\nclass Project extends Component {\n  render() {\n    const { title, description, link } = this.props.project;\n    return (\n      <div style={{ display: \"inline-block\", width: 300, margin: 10 }}>\n        <h3>{title}</h3>\n        {/* <img src={image} alt=\"\" style={{ width: 200, height: 120 }} /> */}\n        <p>{description}</p>\n        <a href={link}>{link}</a>\n      </div>\n    );\n  }\n}\n\nclass Projects extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <h2>Highlighted Projects</h2>\n        <div>\n          {PROJECTS.map(PROJECT => {\n            return <Project key={PROJECT.id} project={PROJECT} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Projects;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Projects from \"./Projects\";\n\nclass App extends Component {\n  state = {\n    displayBio: false\n  };\n\n  // use arrow functions to access this\n  toggleBio = () => {\n    this.setState({ displayBio: !this.state.displayBio });\n  };\n  render() {\n    // destructuring state to avoid always usimg this.state\n    const { displayBio } = this.state;\n\n    return (\n      <div>\n        <img src={logo} alt=\"profile\" className=\"profile\" />\n        <h1>Hello!</h1>\n        <p>My name is Kelechiiiii </p>\n        {/* <Title /> */}\n        <p>I have great desire to work on innovative and exciting projects</p>\n        {displayBio ? (\n          <div>\n            <p>I live in Siegburg, Germany and i code Everyday</p>\n            <p>I enjoy working with Javascript and Python </p>\n            <p>\n              For Javascript i use React and Vue while for Python i use Django\n              and Flask\n            </p>\n            <button onClick={this.toggleBio}>Show less</button>\n          </div>\n        ) : (\n          <div>\n            <button onClick={this.toggleBio}>Read more</button>\n          </div>\n        )}\n        <hr />\n        <Projects />\n        <hr />\n        {/* <SocialProfiles /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}